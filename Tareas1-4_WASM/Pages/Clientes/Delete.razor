@page "/ClienteDelete";
@page "/ClienteDelete/{ClienteId:int}";
@inject HttpClient httpClient

<div class="card shadow">
    <div class="card-header">
        <h4>Eliminar Cliente</h4>
    </div>
    
    <div class="card-body">
        <div class="row">
            <p><strong>- ID:</strong> @cliente.ClienteId</p>
            <p><strong>- Nombre:</strong> @cliente.Nombre</p>
            <p><strong>- Tel&eacute;fono: </strong> @cliente.Telefono</p>
            <p><strong>- Celular: </strong> @cliente.Celular</p>
            <p><strong>- RNC: </strong> @cliente.RNC</p>
            <p><strong>- Email: </strong> @cliente.Email</p>
            <p><strong>- Direcci&oacute;n: </strong> @cliente.Direccion</p>
        </div>
    </div>
    
    <div class="card-footer d-flex justify-content-end">
        <a href="ClienteIndex" class="btn btn-outline-danger bi bi-box-arrow-left"> Volver</a>
        <button type="button" class="btn btn-danger bi bi-trash-fill" @onclick="Eliminar">Eliminar</button>
    </div>
</div>
@code {

    [Parameter]
    public int ClienteId { get; set; }
    public Clientes cliente = new Clientes();

    protected override async Task OnInitializedAsync()
    {
        if (ClienteId > 0)
        {
            var clienteEncontrado = await httpClient.GetFromJsonAsync<Clientes>($"api/Clientes/{ClienteId}");
            if (clienteEncontrado != null)
            {
                cliente = clienteEncontrado;
            }
        }
    }

    public async Task Eliminar()
    {
        var eliminado = await httpClient.DeleteAsync($"api/Clientes/{cliente.ClienteId}");
        if (eliminado.IsSuccessStatusCode)
        {
            cliente = new Clientes();
        }
    }
}
