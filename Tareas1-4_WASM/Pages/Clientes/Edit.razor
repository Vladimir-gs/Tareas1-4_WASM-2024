@inject HttpClient httpClient
@page "/ClienteEdit";
@page "/ClienteEdit/{ClienteId:int}";


<EditForm Model="cliente" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card shadow-lg">
        <div class="card-header">
            <h3>Editar Cliente</h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-6">
                    <label>Nombre:</label>
                    <InputText @bind-Value="cliente.Nombre" class="form-control"></InputText>
                    <ValidationMessage For="(() => cliente.Nombre)" />
                </div>
                <div class="col-6">
                    <label>Tel&eacute;fono:</label>
                    <InputText @bind-Value="cliente.Telefono" class="form-control"></InputText>
                    <ValidationMessage For="(() => cliente.Telefono)" />
                </div>
            </div>
            <div class="row">
                <div class="col-6">
                    <label>Celular:</label>
                    <InputText @bind-Value="cliente.Celular" class="form-control"></InputText>
                    <ValidationMessage For="(() => cliente.Celular)" />
                </div>
                <div class="col-6">
                    <label>RNC:</label>
                    <InputText @bind-Value="cliente.RNC" class="form-control"></InputText>
                    <ValidationMessage For="(() => cliente.RNC)" />
                </div>
            </div>

            <div>
                <label>Email:</label>
                <InputText @bind-Value="cliente.Email" class="form-control"></InputText>
                <ValidationMessage For="(() => cliente.Email)" />
            </div>
            <div>
                <label>Direcci&oacute;n:</label>
                <InputText @bind-Value="cliente.Direccion" class="form-control"></InputText>
                <ValidationMessage For="(() => cliente.Direccion)" />
            </div>
        </div>
        <div class="card-footer">
            <a href="ClienteIndex" class="btn btn-outline-danger bi bi-box-arrow-left"> Volver</a>
            <button type="submit" class="btn btn-outline-success bi bi-floppy"> Guardar</button>
        </div>

        @if (cambiosGuardados)
        {
            <div class="alert alert-success" role="alert">
                Cambios guardados
            </div>
        }
    </div>
</EditForm>
@code {
    [Parameter]
    public int ClienteId { get; set; }
    public Clientes cliente = new Clientes();
    public bool cambiosGuardados { get; set; }

    protected override async Task OnInitializedAsync()
    {
        if (ClienteId > 0)
        {
            var ClienteEncontrado = await httpClient.GetFromJsonAsync<Clientes>($"api/Clientes/{ClienteId}");
            if (ClienteEncontrado != null)
            {
                cliente = ClienteEncontrado;
            }
        }
    }

    public async Task Guardar()
    {
        var guardado = await httpClient.PutAsJsonAsync($"api/Clientes/{cliente.ClienteId}", cliente);
        if (guardado.IsSuccessStatusCode)
        {
            cambiosGuardados = true;
        }
    }

    public async Task<bool> Validar()
    {
        var clientesRegistrados = await httpClient.GetFromJsonAsync<List<Clientes>>("api/Clientes");
        return clientesRegistrados!.Any(c =>
        (c.Nombre!.ToLower().Replace(" ", "") == cliente.Nombre!.ToLower().Replace(" ", "")
        || c.RNC! == cliente.RNC!) && c.ClienteId != cliente.ClienteId);
    }
}
