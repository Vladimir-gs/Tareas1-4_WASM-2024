@inject HttpClient httpClient
@page "/SistemaCreate"

<EditForm Model="sistema" OnValidSubmit="Guardar">
    <DataAnnotationsValidator />

    <div class="card shadow-lg">
        <div class="card-header">
            <h3>Registro de Sistemas</h3>
        </div>
        <div class="card-body">
            <div class="row">
                <div class="col-6">
                    <label>Nombre:</label>
                    <InputText @bind-Value="sistema.NombreSistema" class="form-control"></InputText>
                    <ValidationMessage For="(() => sistema.NombreSistema)" />
                </div>
                <div class="col-6">
                    <label>Descripci&oacute;n:</label>
                    <InputText @bind-Value="sistema.DescripcionSistema" class="form-control"></InputText>
                    <ValidationMessage For="(() => sistema.DescripcionSistema)" />
                </div>
            </div>
        </div>
        <div class="card-footer">
            <a href="SistemaIndex" class="btn btn-outline-danger bi bi-box-arrow-left"> Volver</a>
            <button type="button" class="btn btn-outline-primary bi bi-file-earmark-plus" @onclick="Nuevo"> Nuevo</button>
            <button type="submit" class="btn btn-outline-success bi bi-floppy"> Guardar</button>
        </div>
    </div>
</EditForm>
@code {
    public Sistemas sistema = new Sistemas();

    public void Nuevo()
    {
        sistema = new Sistemas();
    }

    public async Task Guardar()
    {
        var guardado = await httpClient.PostAsJsonAsync("api/Sistemas", this.sistema);
        if (guardado.IsSuccessStatusCode)
        {
            Nuevo();
        }

    }

    public async Task<bool> Validar()
    {
        var sistemas = (await httpClient.GetFromJsonAsync<List<Sistemas>>("Sistemas"))!;

        return sistemas.Any(p => p.DescripcionSistema!.ToLower() == sistema.DescripcionSistema!.ToLower()
                                    && p.SistemaId != sistema.SistemaId);
    }
}
